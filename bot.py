import logging
import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties  # ‚úÖ –ù–æ–≤—ã–π —Å–ø–æ—Å–æ–± —É—Å—Ç–∞–Ω–æ–≤–∫–∏ parse_mode
from googletrans import Translator

# ‚úÖ –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω (API_bot)
TOKEN = os.getenv("API_bot")

# üîç –û—Ç–ª–∞–¥–∫–∞: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–µ–Ω –ª–∏ —Ç–æ–∫–µ–Ω (–≤—ã–≤–µ–¥–µ—Ç –≤ –ª–æ–≥–∏)
if not TOKEN:
    raise ValueError("‚ùå –û—à–∏–±–∫–∞: –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Railway ‚Üí Variables.")

logging.basicConfig(level=logging.INFO)

# ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ (–ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Å–ø–æ—Å–æ–± —É—Å—Ç–∞–Ω–æ–≤–∫–∏ parse_mode)
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())
translator = Translator()

# ‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∞
LANGUAGES_MAP = {"–†—É—Å—Å–∫–∏–π": "ru", "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π": "en", "–ù–µ–º–µ—Ü–∫–∏–π": "de", "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π": "fr"}
user_languages = {}

# ‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
lang_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text=lang)] for lang in LANGUAGES_MAP.keys()],
    resize_keyboard=True
)

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–µ—Ä–µ–≤–æ–¥—á–∏–∫. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /lang, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫.")

@dp.message(Command("lang"))
async def cmd_lang(message: types.Message):
    await message.answer("üåç –í—ã–±–µ—Ä–∏ —è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞:", reply_markup=lang_keyboard)

@dp.message(lambda message: message.text in LANGUAGES_MAP)
async def select_language(message: types.Message):
    user_languages[message.from_user.id] = LANGUAGES_MAP[message.text]
    await message.answer(f"‚úÖ –Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {message.text}")

@dp.message()
async def translate_message(message: types.Message):
    user_id = message.from_user.id
    target_lang = user_languages.get(user_id, "en")

    try:
        detected_lang = translator.detect(message.text).lang
        if detected_lang == target_lang:
            await message.answer("üîπ –¢–≤–æ–π —Ç–µ–∫—Å—Ç —É–∂–µ –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ!")
            return

        translated_text = translator.translate(message.text, dest=target_lang).text
        await message.answer(f"üìú –ü–µ—Ä–µ–≤–æ–¥:\n<code>{translated_text}</code>")
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞.")

async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())


