import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from googletrans import Translator
import asyncio

# ‚úÖ –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (Railway –∏—Å–ø–æ–ª—å–∑—É–µ—Ç API_bot)
TOKEN = os.getenv("API_bot")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–∫–µ–Ω
if not TOKEN:
    raise ValueError("‚ùå –û—à–∏–±–∫–∞: –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è API_bot –∑–∞–¥–∞–Ω–∞ –≤ Railway.")

# ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())

# ‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# ‚úÖ –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫
translator = Translator()

# ‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∞
LANGUAGES_MAP = {
    "–†—É—Å—Å–∫–∏–π": "ru",
    "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π": "en",
    "–ù–µ–º–µ—Ü–∫–∏–π": "de",
    "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π": "fr"
}

# ‚úÖ –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_languages = {}

# ‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
lang_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text=lang)] for lang in LANGUAGES_MAP.keys()],
    resize_keyboard=True
)

# üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–µ—Ä–µ–≤–æ–¥—á–∏–∫. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /lang, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞.")

# üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    await message.answer("üìñ –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç, –∏ —è –ø–µ—Ä–µ–≤–µ–¥—É –µ–≥–æ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–±–æ–π —è–∑—ã–∫.\n–í—ã–±–µ—Ä–∏ —è–∑—ã–∫ –∫–æ–º–∞–Ω–¥–æ–π /lang.")

# üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /lang
@dp.message(Command("lang"))
async def cmd_lang(message: types.Message):
    await message.answer("üåç –í—ã–±–µ—Ä–∏ —è–∑—ã–∫ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:", reply_markup=lang_keyboard)

# üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
@dp.message(lambda message: message.text in LANGUAGES_MAP)
async def select_language(message: types.Message):
    user_languages[message.from_user.id] = LANGUAGES_MAP[message.text]
    await message.answer(f"‚úÖ –Ø–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {message.text}")

# üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def translate_message(message: types.Message):
    user_id = message.from_user.id
    target_lang = user_languages.get(user_id, "en")  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π

    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        detected_lang = translator.detect(message.text).lang

        # –ï—Å–ª–∏ —è–∑—ã–∫ —É–∂–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ü–µ–ª–µ–≤—ã–º
        if detected_lang == target_lang:
            await message.answer("üîπ –¢–≤–æ–π —Ç–µ–∫—Å—Ç —É–∂–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ!")
            return

        # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç
        translated_text = translator.translate(message.text, dest=target_lang).text
        await message.answer(f"üìú –ü–µ—Ä–µ–≤–æ–¥:\n<code>{translated_text}</code>")
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
@dp.errors()
async def error_handler(update, exception):
    logging.error(f"‚ùå –û—à–∏–±–∫–∞: {exception}")
    return True  # –ß—Ç–æ–±—ã –±–æ—Ç –Ω–µ –ø–∞–¥–∞–ª

# üìå –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await bot.delete_webhook(drop_pending_updates=True)  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∞–ø–¥–µ–π—Ç—ã
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

